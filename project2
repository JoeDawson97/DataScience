import json
import os
import math
# import sklearn
# import numpy as np
# import matplotlib.pyplot as plt

def f():
    f = open('test_data.json', encoding='utf-8')
    res = f.read()
    data = json.loads(res)
    records = {}
    records_list = []
    scores = {}
    pass_rate = {}
    averages = []

    for key in data:
        singleData = data[key]
        for case in singleData['cases']:
            caseId = case['case_id']
            if caseId in records:
                records[caseId] = records[caseId] + len(case['upload_records'])
            else:
                records[caseId] = len(case['upload_records'])

            if caseId in scores:
                scores[caseId].append(case['final_score'])
            else:
                scores[caseId] = []

    for key in records:
        if key in scores:
            pass_rate[key] = (sum(scores[key]) / 100) / records[key]
        else:
            pass_rate[key] = 0

    res = []
    temp_in_res = []
    # print(pass_rate)
    for key in pass_rate:
        res.append(find_min(pass_rate, temp_in_res))
    # print(res)
    easy_gap = int(math.ceil(len(res) * 0.3))
    hard_gap = int(math.ceil(len(res) * 0.7))
    print('Easy: ', res[:easy_gap])
    print('Middle: ', res[easy_gap: hard_gap])
    print('Hard: ', res[hard_gap:-1])


def find_min(arr, temp):
    minr = 1
    min_key = -1
    for key in arr:
        if arr[key]<=minr and temp.count(key) == 0:
            minr = arr[key]
            min_key = key
    temp.append(min_key)
    return {
        'id': min_key,
        'rate': minr
    }
# for key in records:
#     records_list.append(records[key])
#     if key in scores:
#         averages.append(sum(scores[key]) / len(scores[key]))
#     else:
#         averages.append(0)

f()



# plt.rc('font',family='STXihei',size=15)
# plt.scatter(averages, records_list,,60,color='blue',marker='o',linewidths=3,alpha=0.4)
# plt.xlabel('average')
# plt.ylabel("time")
# plt.title('title')
# plt.show()

# in_averages = np.array(averages).reshape(-1,1)
# in_record_list = np.array(records_list).reshape(-1,1)
# clf = sklearn.linear_model.LinearRegression()
# clf.fit(in_averages, in_record_list)
# print(clf.coef_,clf.intercept_)
# print(clf.score(in_averages,in_record_list))
